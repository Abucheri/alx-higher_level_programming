======================================================
Using the print_square function from 4-print_square.py
======================================================

This module prints a square made of ``#`` characters with the function ``print_square(size)``.

Usage
=====

The parameter ``size`` represents the height and width of the square.

::

	>>> print_square = __import__('4-print_square').print_square
	>>> print_square(4)
	####
	####
	####
	####

::

	>>> print_square(10)
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########

::

	>>> print_square(0)


::

	>>> print_square(1)
	#

Error Handling Mechanism
========================

The ``print_square(...)`` function handles different error cases:

If the size is less than 0, it raises a ValueError:

::

	>>> print_square(-1)
	Traceback (most recent call last):
	ValueError: size must be >= 0

If the size is not an integer, it raises a TypeError:

::

	>>> print_square(3.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square("not an int")
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square(None)
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square(-7.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square()
	Traceback (most recent call last):
	TypeError: print_square() missing 1 required positional argument: 'size'

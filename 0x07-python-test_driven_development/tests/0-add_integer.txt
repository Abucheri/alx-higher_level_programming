==========================================
Using an integer function 0-add_integer.py
==========================================


This module adds two integers using the function ``add_integer(a, b=98)``

Usage
=====

``add_integer(...)`` returns the sum of 2 integer arguments.

::

	>>> add_integer = __import__('0-add_integer').add_integer

	>>> add_integer(1, 2)
	3

::

	>>> add_integer(100, -2)
	98

::

	>>> add_integer(2)
	100

This function works with floats also

::

	>>> add_integer(2.0, 3.0)
	5

This fundtion works with combination of floats and integers

::

	>>> add_integer(100.3, -2)
	98

Floats are casted into integers also

::

	>>> add_integer(3.5, 0.5)
	3

::

	>>> add_integer(-2.9, -0.2)
	-2

Non-Numbers
===========

The ``add_integer()`` function takes both integers and floats as arguments.
If not, a TypeError is raised

::

	>>> add_integer(4, "School")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

It fails if an infinity is provided

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Also fails fo NaN

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
